cmake_minimum_required(VERSION 3.20.0)

#
# Macro to traverse all the subdirectories of a specific directory
#
MACRO(SUBDIRLIST result curdir)
  FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
  SET(dirlist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child})
      LIST(APPEND dirlist ${child})
    ENDIF()
  ENDFOREACH()
  SET(${result} ${dirlist})
ENDMACRO()

function(JoinList VALUES GLUE OUTPUT)
  string (REGEX REPLACE "([^\\]|^);" "\\1${GLUE}" _TMP_STR "${VALUES}")
  string (REGEX REPLACE "[\\](.)" "\\1" _TMP_STR "${_TMP_STR}") #fixes escaping
  set (${OUTPUT} "${_TMP_STR}" PARENT_SCOPE)
endfunction()

#
# Inject the theme implementation
#
FUNCTION (InjectThemeImplementation THEME)
  
  target_sources(${THEME} PUBLIC
    ${CMAKE_SOURCE_DIR}/src/themes/theme_impl.cpp
  )

ENDFUNCTION()

#
# Enumerates the objects at a given location, and builds up the required structures
#
function(EnumerateObjects type location target_var)

    set(INCLUDE_RESULTS "")
    set(all_objects "")

    message("\n## Enumerating ${type}s at ${location}")
    SUBDIRLIST(subdirs ${location})

    # looping through the directory. The subdir variable will hold both the name of the subdirectory but also the name of the current type (theme, engine, etc...)
    FOREACH(subdir ${subdirs})

        # Did we find a directory at the given location
        message(STATUS "${type} found at: ${subdir}")

        # Reading the file
        file(READ ${location}/${subdir}/descr.json ${subdir}_json_content)
        sbeParseJson(${subdir}_json ${subdir}_json_content)

        # check will be set to 2 if the current object has the required platform and renderer
        set("${subdir}_check" "0")

        foreach(var ${${subdir}_json})

            if(CMAKE_EXTRA_DEBUG)
                message("-- ${theme} using as: ${var} = ${${var}}")
            endif()

            # Theme platform mathces?
            if("${var}" STREQUAL "${subdir}_json.${type}.platform" )
                if(${${var}} STREQUAL ${TargetPlatform})
                    message(STATUS "Platform match: ${subdir} (${type}) has the right platform: ${TargetPlatform}")
                    math(EXPR "${subdir}_check" "${${subdir}_check} + 1")
                endif()
            endif()

            # Theme mode mathces?
            if("${var}" STREQUAL "${subdir}_json.${type}.mode" )
                if(${${var}} STREQUAL ${TargetRenderer})
                    message(STATUS "Renderer match: ${subdir} (${type}) has the right mode: ${TargetRenderer}")
                    math(EXPR "${subdir}_check" "${${subdir}_check} + 1")
                endif()
            endif()

        endforeach(var ${${subdir}_json})

        # Do we accept the theme?
        if(${subdir}_check EQUAL 2)
            message("** ${subdir} accepted, initializing")
            list(APPEND INCLUDE_RESULTS "${type}s/${subdir}/${${subdir}_json.${type}.name}.h")
            list(APPEND all_objects ${subdir})

            message("Entering subidr: ${type}s/${subdir}")
            add_subdirectory("${type}s/${subdir}")

            set(options_callback_provided FALSE)
            set(callback_function_name "")

            # Check if a callback function name is provided as the last argument
            if(ARGC GREATER 3)
                set(callback_function_name ${ARGV3})
                set(options_callback_provided TRUE)
            endif()

            # Check if the callback should be called
            if(options_callback_provided)
                message("Callback function detected: ${callback_function_name}")
                cmake_language(CALL ${callback_function_name} ${subdir})
            else()
                message("No callback function provided.")
            endif()

            message("** ${subdir} accepted, initialized")
        endif()

    ENDFOREACH(subdir ${subdirs})

    set(STYPE ${type})
    string(TOUPPER ${type} STYPE)

    file(WRITE ${CMAKE_BINARY_DIR}/${type}s.h "/* Autogenerated by CMake on ${TIMEZ}. All changes to this file will be lost*/\n")
    file(APPEND ${CMAKE_BINARY_DIR}/${type}s.h "#ifndef _COGUI_${STYPE}S_H_\n#define _COGUI_${STYPE}S_H_\n")
    file(APPEND ${CMAKE_BINARY_DIR}/${type}s.h "/** Autogenerated on ${TIMEZ} */\n")
    foreach(header ${INCLUDE_RESULTS})
        file(APPEND ${CMAKE_BINARY_DIR}/${type}s.h "#include \"${header}\"\n")
    endforeach()
    file(APPEND ${CMAKE_BINARY_DIR}/${type}s.h "#endif\n")

    # Generate the cpp file for the theme's install directory
    file(WRITE ${CMAKE_BINARY_DIR}/${type}s.cpp "#include <${type}.h>\n")
    file(APPEND ${CMAKE_BINARY_DIR}/${type}s.cpp "const char* cogui::${type}::type=\"${type}\";\n")
    file(APPEND ${CMAKE_BINARY_DIR}/${type}s.cpp "const char* cogui::${type}::path=\"${CMAKE_INSTALL_PREFIX}/lib/cogui/${type}s\";\n")

    # Identify the first theme
    list(LENGTH all_objects obj_cnt)
    message("object count: ${obj_cnt}")
    if(obj_cnt GREATER_EQUAL 1)
        JoinList(${all_objects} "\";\"" str_all_objects)
        file(APPEND ${CMAKE_BINARY_DIR}/${type}s.cpp "std::vector<std::string> g_s_all_${type}s={\"${str_all_objects}\"};\n")

        list(GET all_objects 0 main_theme)
        file(APPEND ${CMAKE_BINARY_DIR}/${type}s.cpp "std::string g_s_${type}_name = \"${main_theme}\";\n")
    endif()

endfunction(EnumerateObjects)


###################################################
#         Sorting out the themes                  #
###################################################

set(ALL_THEMES "")
EnumerateObjects(theme "${CMAKE_CURRENT_SOURCE_DIR}/themes" ALL_THEMES InjectThemeImplementation)

###################################################
#         Sorting out the graphic engines         #
###################################################

set(ALL_RENDERING_ENGINES "")
EnumerateObjects(rendering_engine "${CMAKE_CURRENT_SOURCE_DIR}/rendering_engines" ALL_RENDERING_ENGINES)

###################################################
#         Sorting out the input providers         #
###################################################

set(ALL_INPUT_PROVIDERS "")
EnumerateObjects(input_provider "${CMAKE_CURRENT_SOURCE_DIR}/input_providers" ALL_INPUT_PROVIDERS)


include_directories(${CMAKE_CURRENT_SOURCE_DIR})
#
# Adding what needs to be added
#
add_subdirectory(mouse)
add_subdirectory(logger)
add_subdirectory(controls)

