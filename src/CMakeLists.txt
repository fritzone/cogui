cmake_minimum_required(VERSION 3.25.0)

include(${CMAKE_SOURCE_DIR}/cmake/cogui.cmake)

#
# Identifying the themes, input providers and rendering engines
#
set(ALL_THEMES "")
set(ALL_INPUT_PROVIDERS "")
set(ALL_RENDERING_ENGINES "")

EnumerateObjects(theme "${CMAKE_CURRENT_SOURCE_DIR}/themes" ALL_THEMES)
EnumerateObjects(rendering_engine "${CMAKE_CURRENT_SOURCE_DIR}/rendering_engines" ALL_RENDERING_ENGINES)
EnumerateObjects(input_provider "${CMAKE_CURRENT_SOURCE_DIR}/input_providers" ALL_INPUT_PROVIDERS)

#
# Now create the factory bindings for the identified objects and render the extension_manager.cpp to cover all the
# identified extensions
#
set(EXTENSION_MANAGER_CPP ${CMAKE_BINARY_DIR}/extension_manager.cpp)
file(WRITE  ${EXTENSION_MANAGER_CPP} "/* Autogenerated by CMake on ${TIMEZ}. All changes to this file will be lost*/\n")
file(APPEND ${EXTENSION_MANAGER_CPP} "#include <extension_manager.h>\n")
file(APPEND ${EXTENSION_MANAGER_CPP} "#include <factory.h>\n")

foreach(theme ${ALL_THEMES})
    file(APPEND ${EXTENSION_MANAGER_CPP} "#include <${theme}.h>\n")
endforeach()

foreach(re ${ALL_RENDERING_ENGINES})
    file(APPEND ${EXTENSION_MANAGER_CPP} "#include <${re}.h>\n")
endforeach()

foreach(inp ${ALL_INPUT_PROVIDERS})
    file(APPEND ${EXTENSION_MANAGER_CPP} "#include <${inp}.h>\n")
endforeach()

#
# The function that will be called to register all the extensions
#
file(APPEND ${EXTENSION_MANAGER_CPP} "void cogui::extension::init(int argc, char* argv []) {\n")

# All the input providers
foreach(inp ${ALL_INPUT_PROVIDERS})
    file(APPEND ${EXTENSION_MANAGER_CPP} "    factory<input_provider>::instance().template register_class<cogui::input_providers::${inp}>(\"${inp}\");\n")
endforeach()

# All the themes
foreach(theme ${ALL_THEMES})
    file(APPEND ${EXTENSION_MANAGER_CPP} "    factory<theme>::instance().template register_class<cogui::themes::${theme}>(\"${theme}\");\n")
endforeach()

# All the rendering engines
foreach(re ${ALL_RENDERING_ENGINES})
    file(APPEND ${EXTENSION_MANAGER_CPP} "    factory<rendering_engine>::instance().template register_class<cogui::rendering_engines::${re}>(\"${re}\");\n")
endforeach()

#
# Done with the function
#
file(APPEND ${CMAKE_BINARY_DIR}/extension_manager.cpp "}\n")

#
# Fixing the include directories for the various extensions
#
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

# The includes for the themes
foreach(theme ${ALL_THEMES})
    include_directories("${CMAKE_CURRENT_SOURCE_DIR}/themes/${theme}")
endforeach()

# The includes for the rendering engines
foreach(re ${ALL_RENDERING_ENGINES})
    include_directories("${CMAKE_CURRENT_SOURCE_DIR}/rendering_engines/${re}")
endforeach()

# The includes for the input providers
foreach(inp ${ALL_INPUT_PROVIDERS})
    include_directories("${CMAKE_CURRENT_SOURCE_DIR}/input_providers/${inp}")
endforeach()

#
# Adding what needs to be added
#
add_subdirectory(mouse)
add_subdirectory(logger)
add_subdirectory(keyboard)

add_subdirectory(controls)


