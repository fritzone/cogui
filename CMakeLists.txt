cmake_minimum_required(VERSION 3.1)

project(cogui)

set (CMAKE_CXX_STANDARD 20)

include(cmake/cogui.cmake)
include(cmake/JSONParser.cmake)
include(cmake/FindGPM.cmake)
if(NOT ${LIBGPM_FOUND})
    message(FATAL_ERROR "libgpm was not found, it is required for mouse input")
endif()

STRING(TIMESTAMP TIMEZ UTC)    

include_directories(${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR})

###################################################
#         Sorting out the themes                  #
###################################################
SUBDIRLIST(themes ${CMAKE_SOURCE_DIR}/themes)
set(theme "" CACHE STRING "The theme used to run the application")
set_property(CACHE theme PROPERTY STRINGS ${themes})

set(THEMES_SOURCES "" CACHE STRING "All the source files for all the themes")
set(THEMES_INCLUDES "" CACHE STRING "All the theme headers gathered")
#set(THEMES_LIBS "" CACHE STRING "All the themes' libraries")

FOREACH(theme ${themes})
	message("Theme found: ${theme}")
	file(READ ${CMAKE_SOURCE_DIR}/themes/${theme}/theme.json ${theme}_json_content)
	sbeParseJson(${theme}_json ${theme}_json_content)

	foreach(var ${${theme}_json})
	    message("${var} = ${${var}}")
	endforeach()

	list(APPEND THEMES_INCLUDE "themes/${theme}/${${theme}_json.theme.name}.h")
	#list(APPEND THEMES_LIBS "${${theme}_json.theme.library}")

	add_subdirectory(themes/${theme})

ENDFOREACH()

message("All themes: ${themes} in libraries: ${THEMES_LIBS}")

# Generate the all themese header
file(WRITE ${CMAKE_BINARY_DIR}/themes.h "#ifndef _COGUI_THEMES_H_\n#define _COGUI_THEMES_H_\n")
file(APPEND ${CMAKE_BINARY_DIR}/themes.h "/** Autogenerated on ${TIMEZ} */\n")
foreach(theme_header ${THEMES_INCLUDE})
	file(APPEND ${CMAKE_BINARY_DIR}/themes.h "#include \"${theme_header}\"\n")
endforeach()
file(APPEND ${CMAKE_BINARY_DIR}/themes.h "#endif\n")

###################################################
#         Sorting out the graphic engines         #
###################################################
SUBDIRLIST(engines ${CMAKE_SOURCE_DIR}/graphic_engines)
set(engine "" CACHE STRING "The engine used to run the application")
set_property(CACHE engine PROPERTY STRINGS ${engines})

set(ENGINES_SOURCES "" CACHE STRING "All the source files for all the engines")
set(ENGINES_INCLUDES "" CACHE STRING "All the engine headers gathered")
#set(ENGINES_LIBS "" CACHE STRING "All the engines' libraries")

FOREACH(engine ${engines})
	message("Theme found: ${engine}")
	file(READ ${CMAKE_SOURCE_DIR}/graphic_engines/${engine}/engine.json ${engine}_json_content)
	sbeParseJson(${engine}_json ${engine}_json_content)

	foreach(var ${${engine}_json})
	    message("${var} = ${${var}}")
	endforeach()

	list(APPEND ENGINES_INCLUDE "graphic_engines/${engine}/${${engine}_json.engine.name}.h")
	#list(APPEND ENGINES_LIBS "${${engine}_json.engine.library}")

	add_subdirectory(graphic_engines/${engine})

ENDFOREACH()

message("All engines: ${engines} in libraries: ${ENGINES_LIBS}")

# Generate the all enginese header
file(WRITE ${CMAKE_BINARY_DIR}/graphic_engines.h "#ifndef _COGUI_ENGINES_H_\n#define _COGUI_ENGINES_H_\n")
file(APPEND ${CMAKE_BINARY_DIR}/graphic_engines.h "/** Autogenerated on ${TIMEZ} */\n")
foreach(engine_header ${ENGINES_INCLUDE})
	file(APPEND ${CMAKE_BINARY_DIR}/graphic_engines.h "#include \"${engine_header}\"\n")
endforeach()
file(APPEND ${CMAKE_BINARY_DIR}/graphic_engines.h "#endif\n")

###################################################
#    The core of the project is handled here      #
###################################################

set(PROJECT_SOURCES
	${CMAKE_BINARY_DIR}/themes.h
    cogui.cpp theme_manager.cpp graphics_engine_manager.cpp
    window.cpp desktop.cpp 
    application.cpp events.cpp mouse.cpp xterm_input.cpp gpm_input.cpp arguments.cpp
    control.cpp button.cpp container.cpp layout.cpp menu.cpp checkbox.cpp
    logstream.cpp
)

add_library(${PROJECT_NAME}  ${PROJECT_SOURCES})
target_link_libraries(${PROJECT_NAME} ${CURSES_NCURSESW_LIBRARY} pthread dl gpm)

add_executable(cogui_ex main.cpp)
target_link_libraries(cogui_ex ${PROJECT_NAME})

