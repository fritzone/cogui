cmake_minimum_required(VERSION 3.20)

project(cogui)

set (CMAKE_CXX_STANDARD 20)

set(CMAKE_EXTRA_DEBUG 0)

include(cmake/cogui.cmake)
include(cmake/JSONParser.cmake)

#
# Checking the platform
#
set(TargetPlatform "" CACHE STRING "The target platform for the build of the library")

if (WIN32)
    message("Running on Win32")
    set(TargetPlatform "windows")
endif (WIN32)

if (UNIX)
    message("Running on Unix*Like. Defaulting to Linux.")
    set(TargetPlatform "linux")
endif (UNIX)

message(STATUS "TargetPlatform='${TargetPlatform}'")

#
# The current timestamp will be placed in the generated files
#
STRING(TIMESTAMP TIMEZ UTC)    

#
# The trarget renderer: console or GUI based
#
set(TargetRenderer "console" CACHE STRING "The target renderer for the build of the library")
set(TargetRenderers "console;graphics" CACHE INTERNAL "The possible target engines for the library: console (ncurses) or GUI based (graphics)")
set_property(CACHE TargetRenderer PROPERTY STRINGS ${TargetRenderers})
message(STATUS "TargetRenderer='${TargetRenderer}'")

#
# Generic includes
#
include_directories(${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR}/inc)


###################################################
#         Sorting out the themes                  #
###################################################
SUBDIRLIST(themes ${CMAKE_SOURCE_DIR}/themes)

message("## Sorting out the themes")

FOREACH(theme ${themes})
        message(STATUS "Theme found: ${theme}")
        file(READ ${CMAKE_SOURCE_DIR}/themes/${theme}/theme.json ${theme}_json_content)
        sbeParseJson(${theme}_json ${theme}_json_content)

        # Theme check will be set to 2 if the current theme has the required platform and renderer
        set("${theme}_check" "0")

        foreach(var ${${theme}_json})

            if(CMAKE_EXTRA_DEBUG)
                message("-- ${theme} using as: ${var} = ${${var}}")
            endif()

            # Theme platform mathces?
            if("${var}" STREQUAL "${theme}_json.theme.platform" )
                if(${${var}} STREQUAL ${TargetPlatform})
                    message(STATUS "Platform match: ${theme} (theme) has the right platform: ${TargetPlatform}")
                    math(EXPR "${theme}_check" "${${theme}_check} + 1")
                endif()
            endif()

            # Theme mode mathces?
            if("${var}" STREQUAL "${theme}_json.theme.mode" )
                if(${${var}} STREQUAL ${TargetRenderer})
                    message(STATUS "Renderer match: ${theme} (theme) has the right mode: ${TargetRenderer}")
                    math(EXPR "${theme}_check" "${${theme}_check} + 1")
                endif()
            endif()

        endforeach(var ${${theme}_json})

        # Do we accept the theme?
        if(${theme}_check EQUAL 2)
            message("** ${theme} accepted, initializing")
            list(APPEND THEMES_INCLUDE "themes/${theme}/${${theme}_json.theme.name}.h")
            add_subdirectory(themes/${theme})
            InjectThemeImplementation(${theme})
            message("** ${theme} accepted, initialized")
        endif()

ENDFOREACH(theme ${themes})

# message("All themes: ${themes} in libraries: ${THEMES_LIBS}")

# Generate the all themes header
file(WRITE ${CMAKE_BINARY_DIR}/themes.h "#ifndef _COGUI_THEMES_H_\n#define _COGUI_THEMES_H_\n")
file(APPEND ${CMAKE_BINARY_DIR}/themes.h "/** Autogenerated on ${TIMEZ} */\n")
foreach(theme_header ${THEMES_INCLUDE})
        file(APPEND ${CMAKE_BINARY_DIR}/themes.h "#include \"${theme_header}\"\n")
endforeach()
file(APPEND ${CMAKE_BINARY_DIR}/themes.h "#endif\n")

# Generate the cpp file for the theme's install directory
file(WRITE ${CMAKE_BINARY_DIR}/theme.cpp "#include <theme.h>\n")
file(APPEND ${CMAKE_BINARY_DIR}/theme.cpp "const char* cogui::theme::type=\"theme\";\n")
file(APPEND ${CMAKE_BINARY_DIR}/theme.cpp "const char* cogui::theme::path=\"${CMAKE_INSTALL_PREFIX}/lib/cogui/themes\";\n")

###################################################
#         Sorting out the graphic engines         #
###################################################
SUBDIRLIST(engines ${CMAKE_SOURCE_DIR}/graphic_engines)
#set(engine "" CACHE STRING "The engine used to run the application")
#set_property(CACHE engine PROPERTY STRINGS ${engines})

#set(ENGINES_SOURCES "" CACHE STRING "All the source files for all the engines")
#set(ENGINES_INCLUDES "" CACHE STRING "All the engine headers gathered")
#set(ENGINES_LIBS "" CACHE STRING "All the engines' libraries")
message(STATUS "##### Sorting out the graphic engines")
FOREACH(engine ${engines})
        message("Engine found: ${engine}")
        file(READ ${CMAKE_SOURCE_DIR}/graphic_engines/${engine}/engine.json ${engine}_json_content)
        sbeParseJson(${engine}_json ${engine}_json_content)

        foreach(var ${${engine}_json})
            message("${var} = ${${var}}")
        endforeach()

        list(APPEND ENGINES_INCLUDE "graphic_engines/${engine}/${${engine}_json.engine.name}.h")

        option(ENABLE_GRAPHICS_ENGINE_${engine} "Enable graphics engine ${engine}" ON)
        if(ENABLE_GRAPHICS_ENGINE_${engine})
            add_subdirectory(graphic_engines/${engine})
        endif()

ENDFOREACH()

#message("All engines: ${engines} in libraries: ${ENGINES_LIBS}")

# Generate the all enginese header
file(WRITE ${CMAKE_BINARY_DIR}/graphic_engines.h "/* Autogenerated by CMake on ${TIMEZ}. All changes to this file will be lost*/\n")
file(APPEND ${CMAKE_BINARY_DIR}/graphic_engines.h "#ifndef _COGUI_ENGINES_H_\n#define _COGUI_ENGINES_H_\n")
file(APPEND ${CMAKE_BINARY_DIR}/graphic_engines.h "/** Autogenerated on ${TIMEZ} */\n")
foreach(engine_header ${ENGINES_INCLUDE})
        file(APPEND ${CMAKE_BINARY_DIR}/graphic_engines.h "#include \"${engine_header}\"\n")
endforeach()
file(APPEND ${CMAKE_BINARY_DIR}/graphic_engines.h "#endif\n")


# Generate the cpp file for the graphics engines install directory
file(WRITE ${CMAKE_BINARY_DIR}/graphics_engine.cpp "/* Autogenerated by CMake on  ${TIMEZ}. All changes to this file will be lost*/\n")
file(APPEND ${CMAKE_BINARY_DIR}/graphics_engine.cpp "#include <graphics_engine.h>\n")
file(APPEND ${CMAKE_BINARY_DIR}/graphics_engine.cpp "const char* cogui::graphics_engine::type=\"graphics_engine\";\n")
file(APPEND ${CMAKE_BINARY_DIR}/graphics_engine.cpp "const char* cogui::graphics_engine::path=\"${CMAKE_INSTALL_PREFIX}/lib/cogui/graphic_engines\";\n")


###################################################
#         Sorting out the input providers         #
###################################################
SUBDIRLIST(input_providers ${CMAKE_SOURCE_DIR}/input_providers)
#set(input_provider "" CACHE STRING "The input provider used to provide input (mouse/keyboard) the application")
#set_property(CACHE input_provider PROPERTY STRINGS ${input_providers})

#set(INPUT_PROVIDER_SOURCES "" CACHE STRING "All the source files for all the input providers")
#set(INPUT_PROVIDER_INCLUDES "" CACHE STRING "All the input provider headers gathered")

FOREACH(input_provider ${input_providers})
        message("Input provider found: ${input_provider}")
        file(READ ${CMAKE_SOURCE_DIR}/input_providers/${input_provider}/descr.json ${input_provider}_json_content)
        sbeParseJson(${input_provider}_json ${input_provider}_json_content)
        foreach(var ${${input_provider}_json})
            message("${var} = ${${var}}")
        endforeach()
        list(APPEND INPUT_PROVIDERS_INCLUDE "input_providers/${input_provider}/${${input_provider}_json.input_provider.name}.h")

        option(ENABLE_INPUT_PROVIDER_${input_provider} "Enable input provider ${input_provider}" ON)
        if(ENABLE_INPUT_PROVIDER_${input_provider})
            add_subdirectory(input_providers/${input_provider})
        endif()

ENDFOREACH()

# message("All input providers: ${input_provider}")

# Generate the all enginese header
file(WRITE ${CMAKE_BINARY_DIR}/input_providers.h "/* Autogenerated by CMake on ${TIMEZ}. All changes to this file will be lost*/\n")
file(APPEND ${CMAKE_BINARY_DIR}/input_providers.h "#ifndef _COGUI_INPUT_PROVIDERS_H_\n#define _COGUI_INPUT_PROVIDERS_H_\n")
file(APPEND ${CMAKE_BINARY_DIR}/input_providers.h "/** Autogenerated on ${TIMEZ} */\n")
foreach(input_provider_header ${INPUT_PROVIDERS_INCLUDE})
        file(APPEND ${CMAKE_BINARY_DIR}/input_providers.h "#include \"${input_provider_header}\"\n")
endforeach()
file(APPEND ${CMAKE_BINARY_DIR}/input_providers.h "#endif\n")

# Generate the cpp file for the graphics engines install directory
file(WRITE ${CMAKE_BINARY_DIR}/input_provider.cpp "/* Autogenerated by CMake on  ${TIMEZ}. All changes to this file will be lost*/\n")
file(APPEND ${CMAKE_BINARY_DIR}/input_provider.cpp "#include <input_provider.h>\n")
file(APPEND ${CMAKE_BINARY_DIR}/input_provider.cpp "const char* cogui::input_provider::type=\"input_provider\";\n")
file(APPEND ${CMAKE_BINARY_DIR}/input_provider.cpp "const char* cogui::input_provider::path=\"${CMAKE_INSTALL_PREFIX}/lib/cogui/input_providers\";\n")

###################################################
#    The core of the project is handled here      #
###################################################

add_subdirectory(mouse)
add_subdirectory(logger)
add_subdirectory(controls)

#
# Test app
#
add_executable(cogui_ex main.cpp)
target_link_libraries(cogui_ex cogui_controls)

